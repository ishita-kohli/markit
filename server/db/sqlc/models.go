// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0

package sqlc

import (
	"database/sql/driver"
	"fmt"
	"time"
)

type DocumentAccessRoles string

const (
	DocumentAccessRolesOwner  DocumentAccessRoles = "owner"
	DocumentAccessRolesEditor DocumentAccessRoles = "editor"
	DocumentAccessRolesViewer DocumentAccessRoles = "viewer"
)

func (e *DocumentAccessRoles) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = DocumentAccessRoles(s)
	case string:
		*e = DocumentAccessRoles(s)
	default:
		return fmt.Errorf("unsupported scan type for DocumentAccessRoles: %T", src)
	}
	return nil
}

type NullDocumentAccessRoles struct {
	DocumentAccessRoles DocumentAccessRoles
	Valid               bool // Valid is true if DocumentAccessRoles is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullDocumentAccessRoles) Scan(value interface{}) error {
	if value == nil {
		ns.DocumentAccessRoles, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.DocumentAccessRoles.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullDocumentAccessRoles) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.DocumentAccessRoles), nil
}

type Document struct {
	ID        int64
	Title     string
	Body      string
	CreatedAt time.Time
	UpdatedAt time.Time
}

type DocumentAccess struct {
	DocumentID int64
	UserID     int64
	Role       DocumentAccessRoles
}

type User struct {
	ID       int64
	Username string
	Email    string
	Password string
}
